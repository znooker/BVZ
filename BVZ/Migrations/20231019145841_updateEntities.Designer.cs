// <auto-generated />
using System;
using BVZ.BVZ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BVZ.Migrations
{
    [DbContext(typeof(ZooDbContext))]
    [Migration("20231019145841_updateEntities")]
    partial class updateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GuideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NrOfParticipants")
                        .HasColumnType("int");

                    b.Property<bool>("TourCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-444000000000"),
                            Description = "Se djungelns mäktigaste djur..",
                            GuideId = new Guid("00000000-0000-0000-0000-000000000009"),
                            NrOfParticipants = 0,
                            TourCompleted = false,
                            TourName = "Djungel-Expeditionen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-444400000000"),
                            Description = "Se havets vidunder!",
                            GuideId = new Guid("00000000-0000-0000-0000-000000000099"),
                            NrOfParticipants = 0,
                            TourCompleted = false,
                            TourName = "Aqua-expedition"
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.TourParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourID");

                    b.HasIndex("VisitorId");

                    b.ToTable("TourParticipants");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.ZooTour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfTour")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMorningTour")
                        .HasColumnType("bit");

                    b.Property<int>("NrOfParticipants")
                        .HasColumnType("int");

                    b.Property<Guid>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ZooDayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourID");

                    b.HasIndex("ZooDayId");

                    b.ToTable("ZooTours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-999000000000"),
                            DateOfTour = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            IsMorningTour = true,
                            NrOfParticipants = 0,
                            TourID = new Guid("00000000-0000-0000-0000-444000000000"),
                            ZooDayId = new Guid("00000000-0000-0000-0000-123000000000")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1000-0000-899000000000"),
                            DateOfTour = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            IsMorningTour = false,
                            NrOfParticipants = 0,
                            TourID = new Guid("00000000-0000-0000-0000-444000000000"),
                            ZooDayId = new Guid("00000000-0000-0000-0000-123000000000")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-999070000000"),
                            DateOfTour = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            IsMorningTour = true,
                            NrOfParticipants = 0,
                            TourID = new Guid("00000000-0000-0000-0000-444400000000"),
                            ZooDayId = new Guid("00000000-0000-0000-0000-123000000000")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-999070000600"),
                            DateOfTour = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            IsMorningTour = false,
                            NrOfParticipants = 0,
                            TourID = new Guid("00000000-0000-0000-0000-444400000000"),
                            ZooDayId = new Guid("00000000-0000-0000-0000-123000000000")
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnimalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnimalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyVisits")
                        .HasColumnType("int");

                    b.Property<int>("Specie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator<string>("AnimalType").HasValue("Animal");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.AnimalVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ZooDayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ZooDayId");

                    b.ToTable("AnimalVisits");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Guides.AnimalCompetence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuideId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("GuideId");

                    b.ToTable("AnimalCompetences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-1000-000000000044"),
                            AnimalId = new Guid("00000000-0000-0000-0000-100000000000"),
                            GuideId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-1000-000000000045"),
                            AnimalId = new Guid("00000000-0000-0000-0000-010000000000"),
                            GuideId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-1000-000000000046"),
                            AnimalId = new Guid("00000000-0000-0000-0000-300000000000"),
                            GuideId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-1000-000000000030"),
                            AnimalId = new Guid("00000000-0000-0000-0000-200000000000"),
                            GuideId = new Guid("00000000-0000-0000-0000-000000000099")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-1000-000000000031"),
                            AnimalId = new Guid("00000000-0000-0000-0000-020000000000"),
                            GuideId = new Guid("00000000-0000-0000-0000-000000000099")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-1000-000000000032"),
                            AnimalId = new Guid("00000000-0000-0000-0000-300000000000"),
                            GuideId = new Guid("00000000-0000-0000-0000-000000000099")
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Guides.Guide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Guides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            IsUnavailable = false,
                            Name = "Hjalmar"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000099"),
                            IsUnavailable = false,
                            Name = "Nisse"
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.ZooDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TodaysDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ZooDays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-123000000000"),
                            Archived = false,
                            TodaysDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.AirHabitat", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal");

                    b.Property<double>("MaxAltitude")
                        .HasColumnType("float");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("AirHabitat");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.LandHabitat", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("LandHabitat");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.WaterHabitat", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal");

                    b.Property<double>("DivingDepth")
                        .HasColumnType("float");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("WaterHabitat");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Air.BaldEagle", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.AirHabitat");

                    b.Property<double>("Wingspan")
                        .HasColumnType("float");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("BaldEagle");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-300000000000"),
                            AnimalName = "Bald Eagle",
                            DailyVisits = 0,
                            Specie = 2,
                            MaxAltitude = 0.0,
                            Wingspan = 1.3999999999999999
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Air.NorwegianBlueParrot", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.AirHabitat");

                    b.Property<bool>("CanSpeak")
                        .HasColumnType("bit");

                    b.Property<string>("FeatherColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("NorwegianBlueParrot");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-030000000000"),
                            AnimalName = "Norwegian Blue Parrot",
                            DailyVisits = 0,
                            Specie = 2,
                            MaxAltitude = 0.0,
                            CanSpeak = true,
                            FeatherColor = "Green"
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Land.Cheetah", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.LandHabitat");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("Cheetah");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-100000000000"),
                            AnimalName = "Cheetah",
                            DailyVisits = 0,
                            Specie = 0,
                            Speed = 70.0
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Land.Okapi", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.LandHabitat");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("Okapi");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-010000000000"),
                            AnimalName = "Okapi",
                            DailyVisits = 0,
                            Specie = 0,
                            Speed = 10.0
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Land.Ozelot", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.LandHabitat");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("Ozelot");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-001000000000"),
                            AnimalName = "Ozelot",
                            DailyVisits = 0,
                            Specie = 0,
                            Speed = 30.0
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Water.ElectricEel", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.WaterHabitat");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("ElectricEel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000000"),
                            AnimalName = "Electric Eel",
                            DailyVisits = 0,
                            Specie = 1,
                            DivingDepth = 120.0
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Species.Water.MorayEel", b =>
                {
                    b.HasBaseType("BVZ.BVZ.Domain.Models.Zoo.Animals.Habitats.WaterHabitat");

                    b.ToTable("Animals", (string)null);

                    b.HasDiscriminator().HasValue("MorayEel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-020000000000"),
                            AnimalName = "Moray Eel",
                            DailyVisits = 0,
                            Specie = 1,
                            DivingDepth = 79.0
                        });
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.Tour", b =>
                {
                    b.HasOne("BVZ.BVZ.Domain.Models.Zoo.Guides.Guide", "Guide")
                        .WithMany("Tours")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.TourParticipant", b =>
                {
                    b.HasOne("BVZ.BVZ.Domain.Models.Visitors.Tour", "Tour")
                        .WithMany("TourParticipants")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BVZ.BVZ.Domain.Models.Visitors.Visitor", "Visitor")
                        .WithMany("TourParticipants")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.ZooTour", b =>
                {
                    b.HasOne("BVZ.BVZ.Domain.Models.Visitors.Tour", "Tour")
                        .WithMany("ZooTours")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BVZ.BVZ.Domain.Models.Zoo.ZooDay", "ZooDay")
                        .WithMany("ZooTours")
                        .HasForeignKey("ZooDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("ZooDay");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.AnimalVisit", b =>
                {
                    b.HasOne("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal", "Animal")
                        .WithMany("AnimalVisits")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BVZ.BVZ.Domain.Models.Zoo.ZooDay", "ZooDay")
                        .WithMany("AnimalVisits")
                        .HasForeignKey("ZooDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("ZooDay");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Guides.AnimalCompetence", b =>
                {
                    b.HasOne("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal", "Animal")
                        .WithMany("AnimalCompentencies")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BVZ.BVZ.Domain.Models.Zoo.Guides.Guide", "Guide")
                        .WithMany("AnimalCompetences")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.Tour", b =>
                {
                    b.Navigation("TourParticipants");

                    b.Navigation("ZooTours");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Visitors.Visitor", b =>
                {
                    b.Navigation("TourParticipants");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Animals.Animal", b =>
                {
                    b.Navigation("AnimalCompentencies");

                    b.Navigation("AnimalVisits");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.Guides.Guide", b =>
                {
                    b.Navigation("AnimalCompetences");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("BVZ.BVZ.Domain.Models.Zoo.ZooDay", b =>
                {
                    b.Navigation("AnimalVisits");

                    b.Navigation("ZooTours");
                });
#pragma warning restore 612, 618
        }
    }
}
